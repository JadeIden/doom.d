#+TITLE: My Hot and Spicy Emacs config
#+OPTIONS: toc:4 h:4
#+STARTUP: showeverything
#+PROPERTY: header-args:emacs-lisp
# #+SETUPFILE: https://fniessen.github.io/org-html-themes/setup/theme-bigblow.setup
#+INFOJS_OPT: view:t toc:t ltoc:t mouse:underline buttons:0 path:http://thomasf.github.io/solarized-css/org-info.min.js
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://thomasf.github.io/solarized-css/solarized-dark.min.css" />

* Other config files
** AwesomeWM
[[file:~/.config/awesome/rc.org][rc.org]]
[[file:~/.config/awesome/mytheme.org][mytheme.org]]
* Helpers
** Buffer create/switch function generator
From reddit https://www.reddit.com/r/emacs/comments/l4v1ux/one_of_the_most_useful_small_lisp_functions_in_my/
#+begin_src emacs-lisp :results none
(defun make-toggle-function (buffer-name buffer-create-fn &optional switch-cont)
  "Makes a toggle-function to have raise-or-create behaviour.

Creates a toggle-function that executes BUFFER-CREATE-FN if a
buffer named BUFFER-NAME doesn't exist, switches to the buffer
named BUFFER-NAME if it exists, and switches to the previous
buffer if we are currently visiting buffer BUFFER-NAME.

The SWITCH-CONT argument is a function which, if given, is called
after the buffer has been created or switched to.  This allows
running further actions that setup the state of the buffer or
modify it."
  (lambda ()
    (interactive)
    (let ((target-buf (get-buffer buffer-name)))
     (if target-buf
     (if (eq (current-buffer) target-buf)
         (progn
           (message "switching to other buffer")
           (switch-to-buffer nil))
         (progn
           (message "switching back...")
           (switch-to-buffer buffer-name)
           (when switch-cont (funcall switch-cont))))
       (message "creating buffer...")
       (funcall buffer-create-fn)
       (when switch-cont (funcall switch-cont))))))
#+end_src
** Org-Capture server
Opens a server on http://localhost:8080/capture/<keys>/<contents> that calls org-capture on <contents>,
with the template <keys>. Run =M-x httpd-start= to start the server.
#+begin_src emacs-lisp :results none
;; TODO: this causes runtime errors, since defservlet* is a macro!
(after! simple-httpd
    '(defservlet* capture/:keys/:txt text/plain ()
     (org-capture-string txt keys)))
#+end_src
** TODO Extract Haskell package name from Flycheck error
One day, I'll get around to turning this into an attrap fixer. Today is not that day.
#+begin_src emacs-lisp :results none
(defun my/extract-package-name-from-flycheck-error ()
  (interactive)
  (let ((err-at-point (call-interactively #'flycheck-copy-errors-as-kill)))
    (with-temp-buffer
      (insert err-at-point)
      (search-backward-regexp "It is a member of the hidden package")
      (let ((matching-line (thing-at-point 'line)))
        (save-match-data
          (and (string-match "‘\\(.+\\)’" matching-line)
               (kill-new (match-string 1 matching-line))))))))
#+end_src
* The actual config
** Theming
#+begin_src emacs-lisp :results none
(setq doom-theme 'doom-monokai-pro)
#+end_src
** Quality of Life
*** Relative line numbers
Relative line numbers like in vim (shows line number of current line, then relative numbers for the rest)
#+begin_src emacs-lisp :results none
(setq display-line-numbers-type 'relative)
#+end_src
*** Switch focus to newly split windows
#+begin_src emacs-lisp :results none
(defun my/switch-window-then-focus (direction)
    (cond
        ((eq direction 'v) (call-interactively 'evil-window-vsplit))
        ((eq direction 'h) (call-interactively 'evil-window-split))
    )
    (other-window 1))
(defun my/switch-window-then-focus-vertical ()
  (interactive)
  (my/switch-window-then-focus 'v)
)
(defun my/switch-window-then-focus-horizontal ()
  (interactive)
  (my/switch-window-then-focus 'h)
)
(map! :map evil-window-map "v" #'my/switch-window-then-focus-vertical)
(map! :map evil-window-map "s" #'my/switch-window-then-focus-horizontal)
#+end_src
*** Python f-string smart-quote fix
Usually, electric quotes doesn't generate closing quotes for f-strings. This fixes it.
#+begin_src emacs-lisp :results none
(after! python
  (sp-local-pair 'python-mode "f\"" "\"" :trigger "f\""))
#+end_src
*** Alternate leader for non-evil modes
#+begin_src emacs-lisp :results none
(setq doom-leader-key "SPC")
(setq doom-localleader-key "SPC m")
(setq doom-leader-alt-key "M-SPC")
(setq doom-localleader-alt-key "M-SPC m")
#+end_src
*** Disable Evil mode for Calc
It kept overriding keys like k and j, so I'm disabling it.
#+begin_src emacs-lisp :results none
(evil-set-initial-state 'calc-mode 'emacs)
#+end_src
*** Set emacs PATH to match system PATH
#+begin_src emacs-lisp :results none
(when (daemonp)
  (exec-path-from-shell-initialize))
#+end_src
*** Autoscroll Comint buffers
#+begin_src emacs-lisp :results none
(setq comint-scroll-to-bottom-on-output t)
#+end_src
*** Helm
**** Re-add fuzzy matching
#+begin_src emacs-lisp :results none
(setq completion-styles `(basic partial-completion emacs22 initials ,(if (version<= emacs-version "27.0") 'helm-flex 'flex)))
#+end_src
**** Quicker .. mapping
Go up a level with =..= .
#+begin_src emacs-lisp :results none
(after! helm-files
(add-hook 'helm-mode-hook 'key-chord-mode)
(setq key-chord-one-keys-delay 0.02)
(key-chord-define helm-find-files-map ".." #'helm-find-files-up-one-level))
#+end_src
**** Faster REPL command history
#+begin_src emacs-lisp :results none
(map! :map comint-mode-map
      "S-<up>" #'helm-comint-input-ring)
#+end_src
**** Ignore .gitignore'd files
#+begin_src emacs-lisp :results none
(setq helm-ff-skip-git-ignored-files t)
#+end_src
*** Easier error navigation with Alt + arrow keys
#+begin_src emacs-lisp :results none
(map! :map flycheck-mode-map
      "M-<down>" #'flycheck-next-error
      "M-<right>" #'flycheck-next-error
      "M-<up>" #'flycheck-previous-error
      "M-<left>" #'flycheck-previous-error)
#+end_src
*** Open dired in current folder
#+begin_src emacs-lisp :results none
(defun my/dired-here ()
  (interactive)
  (find-file "."))
(map! :leader ">" #'my/dired-here)
#+end_src
*** Add clickable links to Comint shells
#+begin_src emacs-lisp :results none
(add-hook 'compilation-shell-minor-mode 'goto-address-mode)
#+end_src
*** Quicker project creation
#+begin_src emacs-lisp :results none
(defun my/create-lazy-project (filename)
  (interactive "MProject name? ")
    (let ((new-dirname (concat (getenv "HOME") "/Projects/" filename)))
        (make-directory new-dirname)
        (funcall-interactively #'projectile-add-known-project new-dirname)))
(map! :map doom-leader-project-map "n" #'my/create-lazy-project)
#+end_src
*** Open =eww= in side window for more natural =helm-dash=
Credit to https://www.simplify.ba/articles/2016/01/25/display-buffer-alist/
#+begin_src emacs-lisp :results none
(add-to-list 'display-buffer-alist
            `(,"^\\*eww\\*"
                (display-buffer-reuse-window
                display-buffer-in-side-window)
                (reusable-frames     . visible)
                (side                . right)
                (window-height       . 0.45)
                ))
#+end_src
*** =ob-ipython-inspect= niceness
#+begin_src emacs-lisp :results none
(add-to-list 'display-buffer-alist
            `(,"^\\*ob-ipython-inspect\\*"
                (display-buffer-reuse-window
                display-buffer-in-side-window)
                (reusable-frames     . visible)
                (side                . right)
                (window-height       . 0.40)
                ))
(map! :map org-mode-map "C-c ." :desc "Inspect" #'ob-ipython-inspect)
#+end_src

** Org
*** Boilerplate settings
#+begin_src emacs-lisp :results none
(setq org-directory "~/org/")
#+end_src
*** Org sidebar keybind
#+begin_src emacs-lisp :results none
;; (defun my/org-agenda-sidebar ()
;;   (interactive)
;;   (let (())
;;     (call-interactively 'org-sidebar-ql )
;;   )
;; )
(map! :map doom-leader-open-map "o" #'org-sidebar-tree-toggle)
#+end_src
*** (retired) Org Roam bindings
This was added before I learned Doom's org module does, in fact, support Org Roam.
#+begin_src emacs-lisp :results none
;; (defun my/open-todays-file ()
;;   (interactive)
;;   (find-file (expand-file-name (concat org-roam-directory "/" (format-time-string "%Y-%m-%d.org"))))
;; )

;; (map! :map doom-leader-notes-map (:prefix ("r" . "roam")
;;                                   :desc "Find file" "f" #'org-roam-find-file
;;                                   :desc "Open today's file" "r" #'my/open-todays-file
;;                                   ))
#+end_src
*** Reopen PDF where you left off
#+begin_src emacs-lisp :results none
(use-package pdf-view-restore
  :after pdf-tools
  :config
  (add-hook 'pdf-view-mode-hook 'pdf-view-restore-mode))

(setq pdf-view-restore-filename "~/.emacs.d/.pdf-view-restore")
#+end_src
*** Prettiness
Credit to https://zzamboni.org/post/beautifying-org-mode-in-emacs/
#+begin_src emacs-lisp :results none
(setq org-hide-emphasis-markers t)
(add-hook 'org-mode-hook 'org-bullets-mode)
(when (display-graphic-p)
  (let* ((variable-tuple
          (cond ((x-list-fonts "ETBembo")         '(:font "ETBembo"))
                ((x-list-fonts "Source Sans Pro") '(:font "Source Sans Pro"))
                ((x-list-fonts "Lucida Grande")   '(:font "Lucida Grande"))
                ((x-list-fonts "Verdana")         '(:font "Verdana"))
                ((x-family-fonts "Sans Serif")    '(:family "Sans Serif"))
                (nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Pro."))))
         (base-font-color     (face-foreground 'default nil 'default))
         (headline           `(:inherit default :weight bold :foreground ,base-font-color)))

    (custom-theme-set-faces
     'user
     `(org-level-8 ((t (,@headline ,@variable-tuple))))
     `(org-level-7 ((t (,@headline ,@variable-tuple))))
     `(org-level-6 ((t (,@headline ,@variable-tuple))))
     `(org-level-5 ((t (,@headline ,@variable-tuple))))
     `(org-level-4 ((t (,@headline ,@variable-tuple :height 1.1))))
     `(org-level-3 ((t (,@headline ,@variable-tuple :height 1.15))))
     `(org-level-2 ((t (,@headline ,@variable-tuple :height 1.25))))
     `(org-level-1 ((t (,@headline ,@variable-tuple :height 1.35))))
     `(org-document-title ((t (,@headline ,@variable-tuple :height 2.0 :underline nil)))))))

#+end_src
** Haskell
*** Extract type alias from word under point
#+begin_src emacs-lisp :results none
(defun my/haskell-extract-type-alias (type-name)
  (interactive "*sName for type alias: ")
  (let (chosen-symbol bounds start-pt end-pt)
        (setq chosen-symbol (thing-at-point 'symbol))
        (setq bounds (bounds-of-thing-at-point 'symbol))
        (setq start-pt (car bounds))
        (setq end-pt (cdr bounds))
  (delete-region start-pt end-pt)
  (insert type-name)
  (save-excursion
    (evil-insert-newline-above)
    (insert (format "type %s = %s" type-name chosen-symbol)))
  ))

(map! :after haskell-mode
      :map haskell-mode-map
      :localleader (:prefix ("x" . "extract")
                    :desc "Extract type alias" "t" #'my/haskell-extract-type-alias))
#+end_src
*** LSP mode
#+begin_src emacs-lisp :results none
;; (add-hook 'haskell-mode-hook #'lsp)
;; (add-hook 'haskell-literate-mode-hook #'lsp)
#+end_src
*** Auto-import
#+begin_src emacs-lisp :results none
(defun my/haskell--prompt-for-import ()
  (interactive)
  (completing-read "Which module?" (my/haskell--get-import-suggestions (thing-at-point 'symbol))))
(defun my/haskell-auto-import ()
  (interactive)
  (haskell-add-import (my/haskell--prompt-for-import)))

(map! :after haskell-mode
      :map haskell-mode-map
      :localleader (:prefix ("I" . "imports")
                    :desc "Auto-import" "i" #'my/haskell-auto-import))
#+end_src
*** Indent fix
#+begin_src emacs-lisp :results none
(with-eval-after-load "haskell-mode"
    ;; This changes the evil "O" and "o" keys for haskell-mode to make sure that
    ;; indentation is done correctly. See
    ;; https://github.com/haskell/haskell-mode/issues/1265#issuecomment-252492026.
    (defun haskell-evil-open-above ()
      (interactive)
      (evil-digit-argument-or-evil-beginning-of-line)
      (haskell-indentation-newline-and-indent)
      (evil-previous-line)
      (haskell-indentation-indent-line)
      (evil-append-line nil))

    (defun haskell-evil-open-below ()
      (interactive)
      (evil-append-line nil)
      (haskell-indentation-newline-and-indent))

    (evil-define-key 'normal haskell-mode-map
      "o" 'haskell-evil-open-below
      "O" 'haskell-evil-open-above)
  )
#+end_src
*** Distinguish numbers in groups of 3
#+begin_src emacs-lisp :results none
(add-hook 'haskell-mode 'num3-mode)
#+end_src
*** Better add cabal import
This uses a helper script I put in ~/scripts/get-hackage-versions.py.
#+begin_src emacs-lisp :results none
(defun my//get-haskage-package-versions (package-name)
  (split-string (shell-command-to-string (format "python3 ~/scripts/get-hackage-versions.py %s" package-name)) "\n"))

(defun my/fancy-add-cabal-import (package-name)
  (interactive "sPackage name? ")
    (haskell-cabal-add-dependency
     (format "%s >= %s" package-name
             (completing-read "Which version?"
                              (reverse (my//get-haskage-package-versions package-name))))))

(map! :after haskell-mode
      :map haskell-mode-map
      :localleader (:prefix ("I" . "imports")
                    :desc "Fancy import" "I" #'my/fancy-add-cabal-import))
#+end_src
** Purescript
*** IDE mode
#+begin_src emacs-lisp :results none
(after! purescript-mode
    (add-hook 'purescript-mode-hook 'psc-ide-mode))
#+end_src
** Lisp
*** Custom prompt
Thanks to ambrevar: https://github.com/joaotavora/sly/issues/360
#+begin_src emacs-lisp :results none
(defun ambrevar/sly-prepare-prompt (old-func &rest args)
  (let ((package (nth 0 args))
        (new-prompt (format "%s:%s"
                            (abbreviate-file-name default-directory)
                            (nth 1 args)))
        (error-level (nth 2 args))
        (condition (nth 3 args)))
    (funcall old-func package new-prompt error-level condition)))

(advice-add 'sly-mrepl--insert-prompt :around #'ambrevar/sly-prepare-prompt)
#+end_src
*** Changing sly/slime keybinds
#+begin_src emacs-lisp :results none
(map! :map sly-mrepl-mode-map
      :i "<up>" #'sly-mrepl-previous-input-or-button
      :i "<down>" #'sly-mrepl-next-input-or-button)
#+end_src
** LaTeX
Automatically update PDF previews on file change
#+begin_src emacs-lisp :results none
(add-hook 'doc-view-mode-hook 'auto-revert-mode)
#+end_src
** Eshell
*** Custom prompt
#+begin_src emacs-lisp :results none
(defun my/eshell-prompt () (concat
                            (propertize (eshell/pwd) 'face '(:foreground "orchid"))
                            (propertize " λ" 'face '(:foreground "green"))
                            " "
                            ))
(setq eshell-prompt-function #'my/eshell-prompt)
#+end_src
*** "Vi" alias
#+begin_src emacs-lisp :results none
(defalias 'eshell/vi 'find-file-other-window)  ;; :^)
(defalias 'eshell/vim 'find-file-other-window)
#+end_src
*** Quick exit
Credit to http://www.howardism.org/Technical/Emacs/eshell-fun.html
#+begin_src emacs-lisp :results none
(defun eshell/x ()
    (insert "exit")
    (eshell-send-input)
    (delete-window))
#+end_src
** Modified evil bindings
*** Window switching
Window switching usually only works with hjkl; now it works with arrow keys!
#+begin_src emacs-lisp :results none
(map! :map evil-window-map "<up>" #'evil-window-up)
(map! :map evil-window-map "<down>" #'evil-window-down)
(map! :map evil-window-map "<left>" #'evil-window-left)
(map! :map evil-window-map "<right>" #'evil-window-right)
#+end_src
*** Recenter cursor when jumping to a mark
#+begin_src emacs-lisp :results none
(defun my/goto-mark-then-center (&rest args)
    (interactive)
    (let ((goto-mark-function (if (require 'evil-owl nil 'noerror)
                              #'evil-owl-goto-mark-line
                              #'evil-goto-mark-line)))
        (call-interactively goto-mark-function)
        (evil-scroll-line-to-center nil)
    )
)
(map! :map evil-normal-state-map "'" #'my/goto-mark-then-center)
#+end_src
*** Open fancy Org Babel code block mode when entering insert mode
Helper function that enters an org src block if necessary, then calls the fn.
#+begin_src emacs-lisp :results none
(defun my/is-comment-p ()
  (s-starts-with-p "#" (thing-at-point 'line t)))

(defun my/wrap-fn-for-ob-code-block (fn)
  (interactive)
  (if (and (org-in-src-block-p) (not (my/is-comment-p)))
    (progn
        (call-interactively 'org-edit-special)
        (call-interactively fn)
    )
    (call-interactively fn)))

(defun my/wrap-fn-that-switches-ob-code-blocks (fn)
  (interactive)
  (call-interactively 'org-edit-src-abort)
  (call-interactively fn)
  (call-interactively 'org-edit-special))
#+end_src
#+begin_src emacs-lisp :results none
(defun my/append-line-or-open-ob-code-window ()
  (interactive)
  (funcall-interactively 'my/wrap-fn-for-ob-code-block 'evil-org-append-line)
)

(defun my/open-above-or-open-ob-code-window ()
  (interactive)
  (funcall-interactively 'my/wrap-fn-for-ob-code-block 'evil-org-open-above)
)

(defun my/open-below-or-open-ob-code-window ()
  (interactive)
  (funcall-interactively 'my/wrap-fn-for-ob-code-block 'evil-org-open-below)
)

(defun my/append-or-open-ob-code-window ()
  (interactive)
  (funcall-interactively 'my/wrap-fn-for-ob-code-block 'evil-append)
)

(defun my/insert-or-open-ob-code-window ()
  (interactive)
  (funcall-interactively 'my/wrap-fn-for-ob-code-block 'evil-insert)
)

(defun my/jump-to-next-ob-code-block ()
  (interactive)
  (my/wrap-fn-that-switches-ob-code-blocks 'org-babel-next-src-block))

(defun my/jump-to-prev-ob-code-block ()
  (interactive)
  (my/wrap-fn-that-switches-ob-code-blocks 'org-babel-previous-src-block))

(when nil (map! :after evil-org
      :map evil-org-mode-map
      :n "a" #'my/append-or-open-ob-code-window
      :n "A" #'my/append-line-or-open-ob-code-window
      :n "o" #'my/open-below-or-open-ob-code-window
      :n "O" #'my/open-above-or-open-ob-code-window
      :n "i" #'my/insert-or-open-ob-code-window
      :n "{{" #'org-babel-previous-src-block
      :n "}}" #'org-babel-next-src-block
))

(evil-define-minor-mode-key 'normal 'org-src-mode "q" 'org-edit-src-abort)
(evil-define-minor-mode-key 'normal 'org-src-mode "}}" 'my/jump-to-next-ob-code-block)
(evil-define-minor-mode-key 'normal 'org-src-mode "{{" 'my/jump-to-prev-ob-code-block)
#+end_src
** TODO Go LSP configuration
Out of the box, the LSP for Go had some weird behavior. When I go back to Go dev,
I should figure out what exactly I do and do not need.
#+begin_src emacs-lisp :results none
(setq lsp-gopls-staticcheck t)
(setq lsp-eldoc-render-all t)
(setq lsp-gopls-complete-unimported t)

(use-package! lsp-mode
  :commands (lsp lsp-deferred)
  :hook (go-mode . lsp-deferred))

(defun lsp-go-install-save-hooks ()
  (add-hook 'before-save-hook #'lsp-format-buffer t t)
  (add-hook 'before-save-hook #'lsp-organize-imports t t))
(add-hook 'go-mode-hook #'lsp-go-install-save-hooks)
#+end_src
** strokes-mode (disabled)
Allows for, among other things, splitting windows with RMB.

Disabled since it was picking up right-clicks as strokes.
#+begin_src emacs-lisp :results none
;; (global-set-key (kbd "<down-mouse-3>") 'strokes-do-stroke)
;; (setq strokes-use-strokes-buffer nil)
#+end_src
** TODO uncategorized
#+begin_src emacs-lisp :results none
(use-package! company
  :config
  (setq company-idle-delay 0)
  (setq company-minimum-prefix-length 1))

(org-babel-do-load-languages
 'org-babel-load-languages
 '((ipython . t)
))

(use-package! company-lsp
  :commands company-lsp)

(use-package! ob-ipython)

(setq lsp-ui-doc-enable nil
      lsp-ui-peek-enable t
      lsp-ui-sideline-enable t
      lsp-ui-imenu-enable t
      lsp-ui-flycheck-enable t)
;;
(put 'narrow-to-region 'disabled nil)

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages (quote (company-lsp company lsp-mode)))
 '(safe-local-variable-values
   (quote
    ((pyvenv-activate . "./env")
     (setenv "GOOGLE_APPLICATION_CREDENTIALS" "polar-standard-246307-5ff6b8064ee7.json")
     (pyenv-activate . "./env")))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
 #+END_SRC

* In progress
** TODO Map creation from anywhere
Ideal workflow: run a command that asks the user for one of the buffer's current maps, then pops up a buffer in =org-mode=
with an emacs-lisp org-babel block prefilled with a =(map! :map <chosen map> )= template. Then I can tweak and adjust it to
my heart's content, hitting =C-c C-c= to test it, and calling org-refile when I'm done to put it in =settings.org= permanently.
#+begin_src emacs-lisp :results none
(setq my/interactive-map-template "* Map for =%s=\n#+begin_src emacs-lisp :results raw\n(defun my/%s-command ()\n\t(interactive)\n\t-- TODO: implement me!\n)\n(map! :map %s my/%s-command)\n#+end_src")
(defun my/interactive-map-open ()
  (interactive)
  (let* ((minor-maps (mapcar #'car minor-mode-map-alist))
         (chosen-map (completing-read "Which map? " (cons (format "%s-map" major-mode) minor-maps))))
    (switch-to-buffer-other-window (make-temp-name (format "*interactive-mapper*" chosen-map)))
    (org-mode)
    (insert (format my/interactive-map-template chosen-map chosen-map chosen-map chosen-map))
    ))
#+end_src
